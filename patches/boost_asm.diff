diff -Naur boost_1_65_1.old/libs/context/src/asm/jump_i386_sysv_elf_gas.S boost_1_65_1/libs/context/src/asm/jump_i386_sysv_elf_gas.S
--- boost_1_65_1.old/libs/context/src/asm/jump_i386_sysv_elf_gas.S	2019-06-10 19:32:44.880007314 -0700
+++ boost_1_65_1/libs/context/src/asm/jump_i386_sysv_elf_gas.S	2020-03-15 09:02:05.534819349 -0700
@@ -1,82 +1,117 @@
 /*
             Copyright Oliver Kowalke 2009.
+            Copyright Thomas Sailer 2013.
    Distributed under the Boost Software License, Version 1.0.
       (See accompanying file LICENSE_1_0.txt or copy at
-          http://www.boost.org/LICENSE_1_0.txt)
+            http://www.boost.org/LICENSE_1_0.txt)
 */
 
-/****************************************************************************************
- *                                                                                      *
- *  ----------------------------------------------------------------------------------  *
- *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  | fc_mxcsr|fc_x87_cw|   EDI   |   ESI   |   EBX    |   EBP   |   EIP   |  hidden |  *
- *  ----------------------------------------------------------------------------------  *
- *  ----------------------------------------------------------------------------------  *
- *  |    8    |    9    |    10   |    11   |    12    |    13   |    14   |    15   |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x20  |   0x24  |                                                            |  *
- *  ----------------------------------------------------------------------------------  *
- *  |    to   |   data  |                                                            |  *
- *  ----------------------------------------------------------------------------------  *
- *                                                                                      *
- ****************************************************************************************/
+/*************************************************************************************
+*  --------------------------------------------------------------------------------- *
+*  |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    | *
+*  --------------------------------------------------------------------------------- *
+*  |    0h   |   04h   |   08h   |   0ch   |   010h  |   014h  |   018h  |   01ch  | *
+*  --------------------------------------------------------------------------------- *
+*  | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit  |   base  |  fc_seh |   EDI   | *
+*  --------------------------------------------------------------------------------- *
+*  --------------------------------------------------------------------------------- *
+*  |    8    |    9    |   10    |    11   |    12   |    13   |    14   |    15   | *
+*  --------------------------------------------------------------------------------- *
+*  |   020h  |  024h   |  028h   |   02ch  |   030h  |   034h  |   038h  |   03ch  | *
+*  --------------------------------------------------------------------------------- *
+*  |   ESI   |   EBX   |   EBP   |   EIP   |    to   |   data  |  EH NXT |SEH HNDLR| *
+*  --------------------------------------------------------------------------------- *
+**************************************************************************************/
 
+.file	"jump_i386_ms_pe_gas.asm"
 .text
-.globl jump_fcontext
-.align 2
-.type jump_fcontext,@function
-jump_fcontext:
-    leal  -0x18(%esp), %esp  /* prepare stack */
+.p2align 4,,15
+.globl	_jump_fcontext
+.def	_jump_fcontext;	.scl	2;	.type	32;	.endef
+_jump_fcontext:
+    /* prepare stack */
+    leal  -0x2c(%esp), %esp
 
 #if !defined(BOOST_USE_TSX)
-    stmxcsr  (%esp)     /* save MMX control- and status-word */
-    fnstcw   0x4(%esp)  /* save x87 control-word */
+    /* save MMX control- and status-word */
+    stmxcsr  (%esp)
+    /* save x87 control-word */
+    fnstcw  0x4(%esp)
 #endif
 
-    movl  %edi, 0x8(%esp)  /* save EDI */
-    movl  %esi, 0xc(%esp)  /* save ESI */
-    movl  %ebx, 0x10(%esp)  /* save EBX */
-    movl  %ebp, 0x14(%esp)  /* save EBP */
-
-    /* store ESP (pointing to context-data) in ECX */
-    movl  %esp, %ecx
-
-    /* first arg of jump_fcontext() == fcontext to jump to */
-    movl  0x20(%esp), %eax
-
-    /* second arg of jump_fcontext() == data to be transferred */
-    movl  0x24(%esp), %edx
-
-    /* restore ESP (pointing to context-data) from EAX */
-    movl  %eax, %esp
-
-    /* address of returned transport_t */
-    movl 0x1c(%esp), %eax
-    /* return parent fcontext_t */
-    movl  %ecx, (%eax)
-    /* return data */
-    movl %edx, 0x4(%eax)
-
-    movl  0x18(%esp), %ecx  /* restore EIP */
+    /* load NT_TIB */
+    movl  %fs:(0x18), %edx
+    /* load fiber local storage */
+    movl  0x10(%edx), %eax
+    movl  %eax, 0x8(%esp)
+    /* load current dealloction stack */
+    movl  0xe0c(%edx), %eax
+    movl  %eax, 0xc(%esp)
+    /* load current stack limit */
+    movl  0x8(%edx), %eax
+    movl  %eax, 0x10(%esp)
+    /* load current stack base */
+    movl  0x4(%edx), %eax
+    movl  %eax, 0x14(%esp)
+    /* load current SEH exception list */
+    movl  (%edx), %eax
+    movl  %eax, 0x18(%esp)
+
+    movl  %edi, 0x1c(%esp)  /* save EDI */
+    movl  %esi, 0x20(%esp)  /* save ESI */
+    movl  %ebx, 0x24(%esp)  /* save EBX */
+    movl  %ebp, 0x28(%esp)  /* save EBP */
+
+    /* store ESP (pointing to context-data) in EAX */
+    movl  %esp, %eax
+
+    /* firstarg of jump_fcontext() == fcontext to jump to */
+    movl  0x30(%esp), %ecx
+    
+    /* restore ESP (pointing to context-data) from ECX */
+    movl  %ecx, %esp
 
 #if !defined(BOOST_USE_TSX)
-    ldmxcsr  (%esp)     /* restore MMX control- and status-word */
-    fldcw    0x4(%esp)  /* restore x87 control-word */
+    /* restore MMX control- and status-word */
+    ldmxcsr  (%esp)
+    /* restore x87 control-word */
+    fldcw  0x4(%esp)
 #endif
 
-    movl  0x8(%esp), %edi  /* restore EDI */
-    movl  0xc(%esp), %esi  /* restore ESI */
-    movl  0x10(%esp), %ebx  /* restore EBX */
-    movl  0x14(%esp), %ebp  /* restore EBP */
-
-    leal  0x20(%esp), %esp  /* prepare stack */
+    /* restore NT_TIB into EDX */
+    movl  %fs:(0x18), %edx
+    /* restore fiber local storage */
+    movl  0x8(%esp), %ecx
+    movl  %ecx, 0x10(%edx)
+    /* restore current deallocation stack */
+    movl  0xc(%esp), %ecx
+    movl  %ecx, 0xe0c(%edx)
+    /* restore current stack limit */
+    movl  0x10(%esp), %ecx
+    movl  %ecx, 0x8(%edx)
+    /* restore current stack base */
+    movl  0x14(%esp), %ecx
+    movl  %ecx, 0x4(%edx)
+    /* restore current SEH exception list */
+    movl  0x18(%esp), %ecx
+    movl  %ecx, (%edx)
+
+    movl  0x2c(%esp), %ecx  /* restore EIP */
+
+    movl  0x1c(%esp), %edi  /* restore EDI */
+    movl  0x20(%esp), %esi  /* restore ESI */
+    movl  0x24(%esp), %ebx  /* restore EBX */
+    movl  0x28(%esp), %ebp  /* restore EBP */
+
+    /* prepare stack */
+    leal  0x30(%esp), %esp
+
+    /* return transfer_t */
+    /* FCTX == EAX, DATA == EDX */
+    movl  0x34(%eax), %edx
 
     /* jump to context */
     jmp *%ecx
-.size jump_fcontext,.-jump_fcontext
 
-/* Mark that we don't need executable stack.  */
-.section .note.GNU-stack,"",%progbits
+.section .drectve
+.ascii " -export:\"jump_fcontext\""
diff -Naur boost_1_65_1.old/libs/context/src/asm/jump_x86_64_sysv_elf_gas.S boost_1_65_1/libs/context/src/asm/jump_x86_64_sysv_elf_gas.S
--- boost_1_65_1.old/libs/context/src/asm/jump_x86_64_sysv_elf_gas.S	2019-06-10 19:32:44.880007314 -0700
+++ boost_1_65_1/libs/context/src/asm/jump_x86_64_sysv_elf_gas.S	2020-03-15 09:02:11.246872111 -0700
@@ -1,80 +1,209 @@
 /*
             Copyright Oliver Kowalke 2009.
+            Copyright Thomas Sailer 2013.
    Distributed under the Boost Software License, Version 1.0.
       (See accompanying file LICENSE_1_0.txt or copy at
             http://www.boost.org/LICENSE_1_0.txt)
 */
 
-/****************************************************************************************
- *                                                                                      *
- *  ----------------------------------------------------------------------------------  *
- *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
- *  ----------------------------------------------------------------------------------  *
- *  ----------------------------------------------------------------------------------  *
- *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  |        R15        |        RBX        |         RBP        |        RIP        |  *
- *  ----------------------------------------------------------------------------------  *
- *                                                                                      *
- ****************************************************************************************/
+/*************************************************************************************
+* ---------------------------------------------------------------------------------- *
+* |     0   |     1   |     2    |     3   |     4   |     5   |     6   |     7   | *
+* ---------------------------------------------------------------------------------- *
+* |    0x0  |    0x4  |    0x8   |    0xc  |   0x10  |   0x14  |   0x18  |   0x1c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |     8   |    9    |    10    |    11   |    12   |    13   |    14   |    15   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x20  |  0x24   |   0x28   |   0x2c  |   0x30  |   0x34  |   0x38  |   0x3c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    16   |    17   |    18   |    19    |    20   |    21   |    22   |    23   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xe40  |   0x44 |   0x48  |   0x4c   |   0x50  |   0x54  |   0x58  |   0x5c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    24   |   25    |    26    |   27    |    28   |    29   |    30   |    31   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x60  |   0x64  |   0x68   |   0x6c  |   0x70  |   0x74  |   0x78  |   0x7c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    32   |   32    |    33    |   34    |    35   |    36   |    37   |    38   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x80  |   0x84  |   0x88   |   0x8c  |   0x90  |   0x94  |   0x98  |   0x9c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    39   |   40    |    41    |   42    |    43   |    44   |    45   |    46   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xa0  |   0xa4  |   0xa8   |   0xac  |   0xb0  |   0xb4  |   0xb8  |   0xbc  | *
+* ---------------------------------------------------------------------------------- *
+* | fc_mxcsr|fc_x87_cw|     <alignment>    |       fbr_strg    |      fc_dealloc   | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    47   |   48    |    49    |   50    |    51   |    52   |    53   |    54   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xc0  |   0xc4  |   0xc8   |   0xcc  |   0xd0  |   0xd4  |   0xd8  |   0xdc  | *
+* ---------------------------------------------------------------------------------- *
+* |        limit      |         base       |         R12       |         R13       | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    55   |   56    |    57    |   58    |    59   |    60   |    61   |    62   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xe0  |   0xe4  |   0xe8   |   0xec  |   0xf0  |   0xf4  |   0xf8  |   0xfc  | *
+* ---------------------------------------------------------------------------------- *
+* |        R14        |         R15        |         RDI       |        RSI        | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    63   |   64    |    65    |   66    |    67   |    68   |    69   |    70   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x100  |  0x104  |  0x108   |  0x10c  |  0x110  |  0x114  |  0x118  |  0x11c  | *
+* ---------------------------------------------------------------------------------- *
+* |        RBX        |         RBP        |       hidden      |        RIP        | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    71   |   72    |    73    |   74    |    75   |    76   |    77   |    78   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x120  |  0x124  |  0x128   |  0x12c  |  0x130  |  0x134  |  0x138  |  0x13c  | *
+* ---------------------------------------------------------------------------------- *
+* |                                   parameter area                               | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    79   |   80    |    81    |   82    |    83   |    84   |    85   |    86   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x140  |  0x144  |  0x148   |  0x14c  |  0x150  |  0x154  |  0x158  |  0x15c  | *
+* ---------------------------------------------------------------------------------- *
+* |       FCTX        |        DATA        |                                       | *
+* ---------------------------------------------------------------------------------- *
+**************************************************************************************/
 
+.file	"jump_x86_64_ms_pe_gas.asm"
 .text
-.globl jump_fcontext
-.type jump_fcontext,@function
-.align 16
+.p2align 4,,15
+.globl	jump_fcontext
+.def	jump_fcontext;	.scl	2;	.type	32;	.endef
+.seh_proc	jump_fcontext
 jump_fcontext:
-    leaq  -0x38(%rsp), %rsp /* prepare stack */
+.seh_endprologue
+
+    leaq  -0x118(%rsp), %rsp /* prepare stack */
 
 #if !defined(BOOST_USE_TSX)
-    stmxcsr  (%rsp)     /* save MMX control- and status-word */
-    fnstcw   0x4(%rsp)  /* save x87 control-word */
+    /* save XMM storage */
+    movaps  %xmm6, 0x0(%rsp)
+    movaps  %xmm7, 0x10(%rsp)
+    movaps  %xmm8, 0x20(%rsp)
+    movaps  %xmm9, 0x30(%rsp)
+    movaps  %xmm10, 0x40(%rsp)
+    movaps  %xmm11, 0x50(%rsp)
+    movaps  %xmm12, 0x60(%rsp)
+    movaps  %xmm13, 0x70(%rsp)
+    movaps  %xmm14, 0x80(%rsp)
+    movaps  %xmm15, 0x90(%rsp)
+    stmxcsr  0xa0(%rsp)  /* save MMX control- and status-word */
+    fnstcw   0xa4(%rsp)  /* save x87 control-word */
 #endif
 
-    movq  %r12, 0x8(%rsp)  /* save R12 */
-    movq  %r13, 0x10(%rsp)  /* save R13 */
-    movq  %r14, 0x18(%rsp)  /* save R14 */
-    movq  %r15, 0x20(%rsp)  /* save R15 */
-    movq  %rbx, 0x28(%rsp)  /* save RBX */
-    movq  %rbp, 0x30(%rsp)  /* save RBP */
+    /* load NT_TIB */
+    movq  %gs:(0x30), %r10
+    /* save fiber local storage */
+    movq  0x20(%r10), %rax
+    movq  %rax, 0xb0(%rsp)
+    /* save current deallocation stack */
+    movq  0x1478(%r10), %rax
+    movq  %rax, 0xb8(%rsp)
+    /* save current stack limit */
+    movq  0x10(%r10), %rax
+    movq  %rax, 0xc0(%rsp)
+    /* save current stack base */
+    movq  0x08(%r10), %rax
+    movq  %rax, 0xc8(%rsp)
+
+    movq  %r12, 0xd0(%rsp)  /* save R12 */
+    movq  %r13, 0xd8(%rsp)  /* save R13 */
+    movq  %r14, 0xe0(%rsp)  /* save R14 */
+    movq  %r15, 0xe8(%rsp)  /* save R15 */
+    movq  %rdi, 0xf0(%rsp)  /* save RDI */
+    movq  %rsi, 0xf8(%rsp)  /* save RSI */
+    movq  %rbx, 0x100(%rsp)  /* save RBX */
+    movq  %rbp, 0x108(%rsp)  /* save RBP */
 
-    /* store RSP (pointing to context-data) in RAX */
-    movq  %rsp, %rax
+    movq  %rcx, 0x110(%rsp)  /* save hidden address of transport_t */
 
-    /* restore RSP (pointing to context-data) from RDI */
-    movq  %rdi, %rsp
+    /* preserve RSP (pointing to context-data) in R9 */
+    movq  %rsp, %r9
 
-    movq  0x38(%rsp), %r8  /* restore return-address */
+    /* restore RSP (pointing to context-data) from RDX */
+    movq  %rdx, %rsp
 
 #if !defined(BOOST_USE_TSX)
-    ldmxcsr  (%rsp)     /* restore MMX control- and status-word */
-    fldcw    0x4(%rsp)  /* restore x87 control-word */
+    /* restore XMM storage */
+    movaps  0x0(%rsp), %xmm6
+    movaps  0x10(%rsp), %xmm7
+    movaps  0x20(%rsp), %xmm8
+    movaps  0x30(%rsp), %xmm9
+    movaps  0x40(%rsp), %xmm10
+    movaps  0x50(%rsp), %xmm11
+    movaps  0x60(%rsp), %xmm12
+    movaps  0x70(%rsp), %xmm13
+    movaps  0x80(%rsp), %xmm14
+    movaps  0x90(%rsp), %xmm15
+ 	ldmxcsr 0xa0(%rsp) /* restore MMX control- and status-word */
+ 	fldcw   0xa4(%rsp) /* restore x87 control-word */
 #endif
 
-    movq  0x8(%rsp), %r12  /* restore R12 */
-    movq  0x10(%rsp), %r13  /* restore R13 */
-    movq  0x18(%rsp), %r14  /* restore R14 */
-    movq  0x20(%rsp), %r15  /* restore R15 */
-    movq  0x28(%rsp), %rbx  /* restore RBX */
-    movq  0x30(%rsp), %rbp  /* restore RBP */
-
-    leaq  0x40(%rsp), %rsp /* prepare stack */
-
-    /* return transfer_t from jump */
-    /* RAX == fctx, RDX == data */
-    movq  %rsi, %rdx
-    /* pass transfer_t as first arg in context function */
-    /* RDI == fctx, RSI == data */
-    movq  %rax, %rdi
+    /* load NT_TIB */
+    movq  %gs:(0x30), %r10
+    /* restore fiber local storage */
+    movq  0xb0(%rsp), %rax
+    movq  %rax, 0x20(%r10)
+    /* restore current deallocation stack */
+    movq  0xb8(%rsp), %rax
+    movq  %rax, 0x1478(%r10)
+    /* restore current stack limit */
+    movq  0xc0(%rsp), %rax
+    movq  %rax, 0x10(%r10)
+    /* restore current stack base */
+    movq  0xc8(%rsp), %rax
+    movq  %rax, 0x08(%r10)
+
+    movq  0xd0(%rsp),  %r12  /* restore R12 */
+    movq  0xd8(%rsp),  %r13  /* restore R13 */
+    movq  0xe0(%rsp),  %r14  /* restore R14 */
+    movq  0xe8(%rsp),  %r15  /* restore R15 */
+    movq  0xf0(%rsp),  %rdi  /* restore RDI */
+    movq  0xf8(%rsp),  %rsi  /* restore RSI */
+    movq  0x100(%rsp), %rbx  /* restore RBX */
+    movq  0x108(%rsp), %rbp  /* restore RBP */
+
+    movq  0x110(%rsp), %rax  /* restore hidden address of transport_t */
+
+    leaq  0x118(%rsp), %rsp /* prepare stack */
+
+    /* restore return-address */
+    popq  %r10
+
+    /* transport_t returned in RAX */
+    /* return parent fcontext_t */
+    movq  %r9, 0x0(%rax)
+    /* return data */
+    movq  %r8, 0x8(%rax)
+
+    /* transport_t as 1.arg of context-function */
+    movq  %rax, %rcx
 
     /* indirect jump to context */
-    jmp  *%r8
-.size jump_fcontext,.-jump_fcontext
+    jmp  *%r10
+.seh_endproc
 
-/* Mark that we don't need executable stack.  */
-.section .note.GNU-stack,"",%progbits
+.section .drectve
+.ascii " -export:\"jump_fcontext\""
diff -Naur boost_1_65_1.old/libs/context/src/asm/make_i386_sysv_elf_gas.S boost_1_65_1/libs/context/src/asm/make_i386_sysv_elf_gas.S
--- boost_1_65_1.old/libs/context/src/asm/make_i386_sysv_elf_gas.S	2019-06-10 19:32:44.880007314 -0700
+++ boost_1_65_1/libs/context/src/asm/make_i386_sysv_elf_gas.S	2020-03-15 09:01:42.518606507 -0700
@@ -1,106 +1,147 @@
 /*
             Copyright Oliver Kowalke 2009.
+            Copyright Thomas Sailer 2013.
    Distributed under the Boost Software License, Version 1.0.
       (See accompanying file LICENSE_1_0.txt or copy at
-          http://www.boost.org/LICENSE_1_0.txt)
+            http://www.boost.org/LICENSE_1_0.txt)
 */
 
-/****************************************************************************************
- *                                                                                      *
- *  ----------------------------------------------------------------------------------  *
- *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  | fc_mxcsr|fc_x87_cw|   EDI   |   ESI   |   EBX    |   EBP   |   EIP   |  hidden |  *
- *  ----------------------------------------------------------------------------------  *
- *  ----------------------------------------------------------------------------------  *
- *  |    8    |    9    |    10   |    11   |    12    |    13   |    14   |    15   |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x20  |   0x24  |                                                            |  *
- *  ----------------------------------------------------------------------------------  *
- *  |    to   |   data  |                                                            |  *
- *  ----------------------------------------------------------------------------------  *
- *                                                                                      *
- ****************************************************************************************/
+/*************************************************************************************
+*  --------------------------------------------------------------------------------- *
+*  |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    | *
+*  --------------------------------------------------------------------------------- *
+*  |    0h   |   04h   |   08h   |   0ch   |   010h  |   014h  |   018h  |   01ch  | *
+*  --------------------------------------------------------------------------------- *
+*  | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit  |   base  |  fc_seh |   EDI   | *
+*  --------------------------------------------------------------------------------- *
+*  --------------------------------------------------------------------------------- *
+*  |    8    |    9    |   10    |    11   |    12   |    13   |    14   |    15   | *
+*  --------------------------------------------------------------------------------- *
+*  |   020h  |  024h   |  028h   |   02ch  |   030h  |   034h  |   038h  |   03ch  | *
+*  --------------------------------------------------------------------------------- *
+*  |   ESI   |   EBX   |   EBP   |   EIP   |    to   |   data  |  EH NXT |SEH HNDLR| *
+*  --------------------------------------------------------------------------------- *
+**************************************************************************************/
 
+.file	"make_i386_ms_pe_gas.asm"
 .text
-.globl make_fcontext
-.align 2
-.type make_fcontext,@function
-make_fcontext:
+.p2align 4,,15
+.globl	_make_fcontext
+.def	_make_fcontext;	.scl	2;	.type	32;	.endef
+_make_fcontext:
     /* first arg of make_fcontext() == top of context-stack */
-    movl  0x4(%esp), %eax
+    movl  0x04(%esp), %eax
 
-    /* reserve space for first argument of context-function
-       eax might already point to a 16byte border */
+    /* reserve space for first argument of context-function */
+    /* EAX might already point to a 16byte border */
     leal  -0x8(%eax), %eax
 
     /* shift address in EAX to lower 16 byte boundary */
     andl  $-16, %eax
 
     /* reserve space for context-data on context-stack */
-    leal  -0x28(%eax), %eax
-
-    /* third arg of make_fcontext() == address of context-function */
-    /* stored in EBX */
-    movl  0xc(%esp), %ecx
-    movl  %ecx, 0x10(%eax)
+    /* size for fc_mxcsr .. EIP + return-address for context-function */
+    /* on context-function entry: (ESP -0x4) % 8 == 0 */
+    /* additional space is required for SEH */
+    leal  -0x40(%eax), %eax
 
     /* save MMX control- and status-word */
-    stmxcsr (%eax)
+    stmxcsr  (%eax)
     /* save x87 control-word */
     fnstcw  0x4(%eax)
 
-    /* return transport_t */
-    /* FCTX == EDI, DATA == ESI */
-    leal  0x8(%eax), %ecx
-    movl  %ecx, 0x1c(%eax)
+    /* first arg of make_fcontext() == top of context-stack */
+    movl  0x4(%esp), %ecx
+    /* save top address of context stack as 'base' */
+    movl  %ecx, 0x14(%eax)
+    /* second arg of make_fcontext() == size of context-stack */
+    movl  0x8(%esp), %edx
+    /* negate stack size for LEA instruction (== substraction) */
+    negl  %edx
+    /* compute bottom address of context stack (limit) */
+    leal  (%ecx,%edx), %ecx
+    /* save bottom address of context-stack as 'limit' */
+    movl  %ecx, 0x10(%eax)
+    /* save bottom address of context-stack as 'dealloction stack' */
+    movl  %ecx, 0xc(%eax)
+	/* set fiber-storage to zero */
+	xorl  %ecx, %ecx
+    movl  %ecx, 0x8(%eax)
+
+    /* third arg of make_fcontext() == address of context-function */
+    /* stored in EBX */
+    movl  0xc(%esp), %ecx
+    movl  %ecx, 0x24(%eax)
 
     /* compute abs address of label trampoline */
-    call  1f
-    /* address of trampoline 1 */
-1:  popl  %ecx
-    /* compute abs address of label trampoline */
-    addl  $trampoline-1b, %ecx
-    /* save address of trampoline as return address */
+    movl  $trampoline, %ecx
+    /* save address of trampoline as return-address for context-function */
     /* will be entered after calling jump_fcontext() first time */
-    movl  %ecx, 0x18(%eax)
+    movl  %ecx, 0x2c(%eax)
 
     /* compute abs address of label finish */
-    call  2f
-    /* address of label 2 */
-2:  popl  %ecx
-    /* compute abs address of label finish */
-    addl  $finish-2b, %ecx
+    movl  $finish, %ecx
     /* save address of finish as return-address for context-function */
     /* will be entered after context-function returns */
-    movl  %ecx, 0x14(%eax) 
+    movl  %ecx, 0x28(%eax)
+
+    /* traverse current seh chain to get the last exception handler installed by Windows */
+    /* note that on Windows Server 2008 and 2008 R2, SEHOP is activated by default */
+    /* the exception handler chain is tested for the presence of ntdll.dll!FinalExceptionHandler */
+    /* at its end by RaiseException all seh andlers are disregarded if not present and the */
+    /* program is aborted */
+    /* load NT_TIB into ECX */
+    movl  %fs:(0x0), %ecx
+
+walk:
+    /* load 'next' member of current SEH into EDX */
+    movl  (%ecx), %edx
+    /* test if 'next' of current SEH is last (== 0xffffffff) */
+    incl  %edx
+    jz  found
+    decl  %edx
+    /* exchange content; ECX contains address of next SEH */
+    xchgl  %ecx, %edx
+    /* inspect next SEH */
+    jmp  walk
+
+found:
+    /* load 'handler' member of SEH == address of last SEH handler installed by Windows */
+    movl  0x04(%ecx), %ecx
+    /* save address in ECX as SEH handler for context */
+    movl  %ecx, 0x3c(%eax)
+    /* set ECX to -1 */
+    movl  $0xffffffff, %ecx
+    /* save ECX as next SEH item */
+    movl  %ecx, 0x38(%eax)
+    /* load address of next SEH item */
+    leal  0x38(%eax), %ecx
+    /* save next SEH */
+    movl  %ecx, 0x18(%eax)
 
-    ret /* return pointer to context-data */
+    /* return pointer to context-data */
+    ret
 
 trampoline:
     /* move transport_t for entering context-function */
-    movl  %edi, (%esp)
-    movl  %esi, 0x4(%esp)
+    /* FCTX == EAX, DATA == EDX */
+    movl  %eax, (%esp)
+    movl  %edx, 0x4(%esp)
+    /* label finish as return-address */
     pushl %ebp
     /* jump to context-function */
-    jmp *%ebx
+    jmp  *%ebx
 
 finish:
-    call  3f
-    /* address of label 3 */
-3:  popl  %ebx
-    /* compute address of GOT and store it in EBX */
-    addl  $_GLOBAL_OFFSET_TABLE_+[.-3b], %ebx
-
-    /* exit code is zero */
+    /* ESP points to same address as ESP on entry of context function + 0x4 */
     xorl  %eax, %eax
+    /* exit code is zero */
     movl  %eax, (%esp)
     /* exit application */
-    call  _exit@PLT
+    call  __exit
     hlt
-.size make_fcontext,.-make_fcontext
 
-/* Mark that we don't need executable stack.  */
-.section .note.GNU-stack,"",%progbits
+.def	__exit;	.scl	2;	.type	32;	.endef  /* standard C library function */
+
+.section .drectve
+.ascii " -export:\"make_fcontext\""
diff -Naur boost_1_65_1.old/libs/context/src/asm/make_x86_64_sysv_elf_gas.S boost_1_65_1/libs/context/src/asm/make_x86_64_sysv_elf_gas.S
--- boost_1_65_1.old/libs/context/src/asm/make_x86_64_sysv_elf_gas.S	2019-06-10 19:32:44.880007314 -0700
+++ boost_1_65_1/libs/context/src/asm/make_x86_64_sysv_elf_gas.S	2020-03-15 09:01:48.122658362 -0700
@@ -1,81 +1,174 @@
 /*
             Copyright Oliver Kowalke 2009.
+            Copyright Thomas Sailer 2013.
    Distributed under the Boost Software License, Version 1.0.
       (See accompanying file LICENSE_1_0.txt or copy at
             http://www.boost.org/LICENSE_1_0.txt)
 */
 
-/****************************************************************************************
- *                                                                                      *
- *  ----------------------------------------------------------------------------------  *
- *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
- *  ----------------------------------------------------------------------------------  *
- *  ----------------------------------------------------------------------------------  *
- *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  |        R15        |        RBX        |         RBP        |        RIP        |  *
- *  ----------------------------------------------------------------------------------  *
- *                                                                                      *
- ****************************************************************************************/
+/*************************************************************************************
+* ---------------------------------------------------------------------------------- *
+* |     0   |     1   |     2    |     3   |     4   |     5   |     6   |     7   | *
+* ---------------------------------------------------------------------------------- *
+* |    0x0  |    0x4  |    0x8   |    0xc  |   0x10  |   0x14  |   0x18  |   0x1c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |     8   |    9    |    10    |    11   |    12   |    13   |    14   |    15   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x20  |  0x24   |   0x28   |   0x2c  |   0x30  |   0x34  |   0x38  |   0x3c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    16   |    17   |    18   |    19    |    20   |    21   |    22   |    23   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xe40  |   0x44 |   0x48  |   0x4c   |   0x50  |   0x54  |   0x58  |   0x5c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    24   |   25    |    26    |   27    |    28   |    29   |    30   |    31   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x60  |   0x64  |   0x68   |   0x6c  |   0x70  |   0x74  |   0x78  |   0x7c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    32   |   32    |    33    |   34    |    35   |    36   |    37   |    38   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x80  |   0x84  |   0x88   |   0x8c  |   0x90  |   0x94  |   0x98  |   0x9c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    39   |   40    |    41    |   42    |    43   |    44   |    45   |    46   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xa0  |   0xa4  |   0xa8   |   0xac  |   0xb0  |   0xb4  |   0xb8  |   0xbc  | *
+* ---------------------------------------------------------------------------------- *
+* | fc_mxcsr|fc_x87_cw|     <alignment>    |       fbr_strg    |      fc_dealloc   | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    47   |   48    |    49    |   50    |    51   |    52   |    53   |    54   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xc0  |   0xc4  |   0xc8   |   0xcc  |   0xd0  |   0xd4  |   0xd8  |   0xdc  | *
+* ---------------------------------------------------------------------------------- *
+* |        limit      |         base       |         R12       |         R13       | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    55   |   56    |    57    |   58    |    59   |    60   |    61   |    62   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xe0  |   0xe4  |   0xe8   |   0xec  |   0xf0  |   0xf4  |   0xf8  |   0xfc  | *
+* ---------------------------------------------------------------------------------- *
+* |        R14        |         R15        |         RDI       |        RSI        | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    63   |   64    |    65    |   66    |    67   |    68   |    69   |    70   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x100  |  0x104  |  0x108   |  0x10c  |  0x110  |  0x114  |  0x118  |  0x11c  | *
+* ---------------------------------------------------------------------------------- *
+* |        RBX        |         RBP        |       hidden      |        RIP        | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    71   |   72    |    73    |   74    |    75   |    76   |    77   |    78   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x120  |  0x124  |  0x128   |  0x12c  |  0x130  |  0x134  |  0x138  |  0x13c  | *
+* ---------------------------------------------------------------------------------- *
+* |                                   parameter area                               | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    79   |   80    |    81    |   82    |    83   |    84   |    85   |    86   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x140  |  0x144  |  0x148   |  0x14c  |  0x150  |  0x154  |  0x158  |  0x15c  | *
+* ---------------------------------------------------------------------------------- *
+* |       FCTX        |        DATA        |                                       | *
+* ---------------------------------------------------------------------------------- *
+**************************************************************************************/
 
+.file	"make_x86_64_ms_pe_gas.asm"
 .text
-.globl make_fcontext
-.type make_fcontext,@function
-.align 16
+.p2align 4,,15
+.globl	make_fcontext
+.def	make_fcontext;	.scl	2;	.type	32;	.endef
+.seh_proc	make_fcontext
 make_fcontext:
+.seh_endprologue
+
     /* first arg of make_fcontext() == top of context-stack */
-    movq  %rdi, %rax
+    movq  %rcx, %rax
 
     /* shift address in RAX to lower 16 byte boundary */
+    /* == pointer to fcontext_t and address of context stack */
     andq  $-16, %rax
 
     /* reserve space for context-data on context-stack */
     /* on context-function entry: (RSP -0x8) % 16 == 0 */
-    leaq  -0x40(%rax), %rax
+    leaq  -0x150(%rax), %rax
 
     /* third arg of make_fcontext() == address of context-function */
-    /* stored in RBX */
-    movq  %rdx, 0x28(%rax)
+    movq  %r8, 0x100(%rax)
+
+    /* first arg of make_fcontext() == top of context-stack */
+    /* save top address of context stack as 'base' */
+    movq  %rcx, 0xc8(%rax)
+    /* second arg of make_fcontext() == size of context-stack */
+    /* negate stack size for LEA instruction (== substraction) */
+    negq  %rdx
+    /* compute bottom address of context stack (limit) */
+    leaq  (%rcx,%rdx), %rcx
+    /* save bottom address of context stack as 'limit' */
+    movq  %rcx, 0xc0(%rax)
+    /* save address of context stack limit as 'dealloction stack' */
+    movq  %rcx, 0xb8(%rax)
+	/* set fiber-storage to zero */
+    xorq  %rcx, %rcx
+    movq  %rcx, 0xb0(%rax)
 
-    /* save MMX control- and status-word */
-    stmxcsr  (%rax)
+	/* save MMX control- and status-word */
+    stmxcsr  0xa0(%rax)
     /* save x87 control-word */
-    fnstcw   0x4(%rax)
+    fnstcw   0xa4(%rax)
+
+    /* compute address of transport_t */
+    leaq  0x140(%rax), %rcx
+    /* store address of transport_t in hidden field */
+    movq %rcx, 0x110(%rax)
 
     /* compute abs address of label trampoline */
     leaq  trampoline(%rip), %rcx
-    /* save address of trampoline as return-address for context-function */
-    /* will be entered after calling jump_fcontext() first time */
-    movq  %rcx, 0x38(%rax)
+    /* save address of finish as return-address for context-function */
+    /* will be entered after jump_fcontext() first time */
+    movq  %rcx, 0x118(%rax)
 
     /* compute abs address of label finish */
     leaq  finish(%rip), %rcx
     /* save address of finish as return-address for context-function */
     /* will be entered after context-function returns */
-    movq  %rcx, 0x30(%rax)
+    movq  %rcx, 0x108(%rax)
 
     ret /* return pointer to context-data */
 
 trampoline:
     /* store return address on stack */
-    /* fix stack alignment */
-    push %rbp
+    /* fix stack alignment */ 
+    pushq %rbp
     /* jump to context-function */
     jmp *%rbx
 
 finish:
+    /* 32byte shadow-space for _exit() */
+    andq  $-32, %rsp
+    /* 32byte shadow-space for _exit() are */
+    /* already reserved by make_fcontext() */
     /* exit code is zero */
-    xorq  %rdi, %rdi
+    xorq  %rcx, %rcx
     /* exit application */
-    call  _exit@PLT
+    call  _exit
     hlt
-.size make_fcontext,.-make_fcontext
+.seh_endproc
+
+.def	_exit;	.scl	2;	.type	32;	.endef  /* standard C library function */
 
-/* Mark that we don't need executable stack. */
-.section .note.GNU-stack,"",%progbits
+.section .drectve
+.ascii " -export:\"make_fcontext\""
diff -Naur boost_1_65_1.old/libs/context/src/asm/ontop_i386_sysv_elf_gas.S boost_1_65_1/libs/context/src/asm/ontop_i386_sysv_elf_gas.S
--- boost_1_65_1.old/libs/context/src/asm/ontop_i386_sysv_elf_gas.S	2019-06-10 19:32:44.888007260 -0700
+++ boost_1_65_1/libs/context/src/asm/ontop_i386_sysv_elf_gas.S	2020-03-15 09:01:52.890702467 -0700
@@ -1,89 +1,125 @@
 /*
             Copyright Oliver Kowalke 2009.
+            Copyright Thomas Sailer 2013.
    Distributed under the Boost Software License, Version 1.0.
       (See accompanying file LICENSE_1_0.txt or copy at
-          http://www.boost.org/LICENSE_1_0.txt)
+            http://www.boost.org/LICENSE_1_0.txt)
 */
 
-/****************************************************************************************
- *                                                                                      *
- *  ----------------------------------------------------------------------------------  *
- *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  | fc_mxcsr|fc_x87_cw|   EDI   |   ESI   |   EBX    |   EBP   |   EIP   |  hidden |  *
- *  ----------------------------------------------------------------------------------  *
- *  ----------------------------------------------------------------------------------  *
- *  |    8    |    9    |    10   |    11   |    12    |    13   |    14   |    15   |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x20  |   0x24  |                                                            |  *
- *  ----------------------------------------------------------------------------------  *
- *  |    to   |   data  |                                                            |  *
- *  ----------------------------------------------------------------------------------  *
- *                                                                                      *
- ****************************************************************************************/
+/*************************************************************************************
+*  --------------------------------------------------------------------------------- *
+*  |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    | *
+*  --------------------------------------------------------------------------------- *
+*  |    0h   |   04h   |   08h   |   0ch   |   010h  |   014h  |   018h  |   01ch  | *
+*  --------------------------------------------------------------------------------- *
+*  | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit  |   base  |  fc_seh |   EDI   | *
+*  --------------------------------------------------------------------------------- *
+*  --------------------------------------------------------------------------------- *
+*  |    8    |    9    |   10    |    11   |    12   |    13   |    14   |    15   | *
+*  --------------------------------------------------------------------------------- *
+*  |   020h  |  024h   |  028h   |   02ch  |   030h  |   034h  |   038h  |   03ch  | *
+*  --------------------------------------------------------------------------------- *
+*  |   ESI   |   EBX   |   EBP   |   EIP   |    to   |   data  |  EH NXT |SEH HNDLR| *
+*  --------------------------------------------------------------------------------- *
+**************************************************************************************/
 
+.file	"ontop_i386_ms_pe_gas.asm"
 .text
-.globl ontop_fcontext
-.align 2
-.type ontop_fcontext,@function
-ontop_fcontext:
-    leal  -0x18(%esp), %esp  /* prepare stack */
+.p2align 4,,15
+.globl	_ontop_fcontext
+.def	_ontop_fcontext;	.scl	2;	.type	32;	.endef
+_ontop_fcontext:
+    /* prepare stack */
+    leal  -0x2c(%esp), %esp
 
 #if !defined(BOOST_USE_TSX)
-    stmxcsr  (%esp)     /* save MMX control- and status-word */
-    fnstcw   0x4(%esp)  /* save x87 control-word */
+    /* save MMX control- and status-word */
+    stmxcsr  (%esp)
+    /* save x87 control-word */
+    fnstcw  0x4(%esp)
 #endif
 
-    movl  %edi, 0x8(%esp)  /* save EDI */
-    movl  %esi, 0xc(%esp)  /* save ESI */
-    movl  %ebx, 0x10(%esp)  /* save EBX */
-    movl  %ebp, 0x14(%esp)  /* save EBP */
+    /* load NT_TIB */
+    movl  %fs:(0x18), %edx
+    /* load fiber local storage */
+    movl  0x10(%edx), %eax
+    movl  %eax, 0x8(%esp)
+    /* load current dealloction stack */
+    movl  0xe0c(%edx), %eax
+    movl  %eax, 0xc(%esp)
+    /* load current stack limit */
+    movl  0x8(%edx), %eax
+    movl  %eax, 0x10(%esp)
+    /* load current stack base */
+    movl  0x4(%edx), %eax
+    movl  %eax, 0x14(%esp)
+    /* load current SEH exception list */
+    movl  (%edx), %eax
+    movl  %eax, 0x18(%esp)
+
+    movl  %edi, 0x1c(%esp)  /* save EDI */
+    movl  %esi, 0x20(%esp)  /* save ESI */
+    movl  %ebx, 0x24(%esp)  /* save EBX */
+    movl  %ebp, 0x28(%esp)  /* save EBP */
 
     /* store ESP (pointing to context-data) in ECX */
     movl  %esp, %ecx
 
     /* first arg of ontop_fcontext() == fcontext to jump to */
-    movl  0x20(%esp), %eax
+    movl  0x30(%esp), %eax
 
-    /* pass parent fcontext_t */
-    movl  %ecx, 0x20(%eax)
+	/* pass parent fcontext_t */
+	movl  %ecx, 0x30(%eax)
 
     /* second arg of ontop_fcontext() == data to be transferred */
-    movl  0x24(%esp), %ecx
+    movl  0x34(%esp), %ecx
 
-    /* pass data */
-    movl %ecx, 0x24(%eax)
+	/* pass data */
+	movl  %ecx, 0x34(%eax)
 
     /* third arg of ontop_fcontext() == ontop-function */
-    movl  0x28(%esp), %ecx
+    movl  0x38(%esp), %ecx
 
-    /* restore ESP (pointing to context-data) from EAX */
+    /* restore ESP (pointing to context-data) from EDX */
     movl  %eax, %esp
 
-    /* address of returned transport_t */
-    movl 0x1c(%esp), %eax
-    /* return parent fcontext_t */
-    movl  %ecx, (%eax)
-    /* return data */
-    movl %edx, 0x4(%eax)
-
 #if !defined(BOOST_USE_TSX)
-    ldmxcsr  (%esp)     /* restore MMX control- and status-word */
-    fldcw    0x4(%esp)  /* restore x87 control-word */
+    /* restore MMX control- and status-word */
+    ldmxcsr  (%esp)
+    /* restore x87 control-word */
+    fldcw  0x4(%esp)
 #endif
 
-    movl  0x8(%esp), %edi  /* restore EDI */
-    movl  0xc(%esp), %esi  /* restore ESI */
-    movl  0x10(%esp), %ebx  /* restore EBX */
-    movl  0x14(%esp), %ebp  /* restore EBP */
+    /* restore NT_TIB into EDX */
+    movl  %fs:(0x18), %edx
+    /* restore fiber local storage */
+    movl  0x8(%esp), %eax
+    movl  %eax, 0x10(%edx)
+    /* restore current deallocation stack */
+    movl  0xc(%esp), %eax
+    movl  %eax, 0xe0c(%edx)
+    /* restore current stack limit */
+    movl  0x10(%esp), %eax
+    movl  %eax, 0x08(%edx)
+    /* restore current stack base */
+    movl  0x14(%esp), %eax
+    movl  %eax, 0x04(%edx)
+    /* restore current SEH exception list */
+    movl  0x18(%esp), %eax
+    movl  %eax, (%edx)
+
+    movl  0x1c(%esp), %edi  /* restore EDI */
+    movl  0x20(%esp), %esi  /* restore ESI */
+    movl  0x24(%esp), %ebx  /* restore EBX */
+    movl  0x28(%esp), %ebp  /* restore EBP */
+
+    /* prepare stack */
+    leal  0x2c(%esp), %esp
 
-    leal  0x18(%esp), %esp  /* prepare stack */
+    /* keep return-address on stack */
 
     /* jump to context */
-    jmp *%ecx
-.size ontop_fcontext,.-ontop_fcontext
+    jmp  *%ecx
 
-/* Mark that we don't need executable stack.  */
-.section .note.GNU-stack,"",%progbits
+.section .drectve
+.ascii " -export:\"ontop_fcontext\""
diff -Naur boost_1_65_1.old/libs/context/src/asm/ontop_x86_64_sysv_elf_gas.S boost_1_65_1/libs/context/src/asm/ontop_x86_64_sysv_elf_gas.S
--- boost_1_65_1.old/libs/context/src/asm/ontop_x86_64_sysv_elf_gas.S	2019-06-10 19:32:44.888007260 -0700
+++ boost_1_65_1/libs/context/src/asm/ontop_x86_64_sysv_elf_gas.S	2020-03-15 09:01:59.462763233 -0700
@@ -1,83 +1,211 @@
 /*
             Copyright Oliver Kowalke 2009.
+            Copyright Thomas Sailer 2013.
    Distributed under the Boost Software License, Version 1.0.
       (See accompanying file LICENSE_1_0.txt or copy at
             http://www.boost.org/LICENSE_1_0.txt)
 */
 
-/****************************************************************************************
- *                                                                                      *
- *  ----------------------------------------------------------------------------------  *
- *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  | fc_mxcsr|fc_x87_cw|        R12        |         R13        |        R14        |  *
- *  ----------------------------------------------------------------------------------  *
- *  ----------------------------------------------------------------------------------  *
- *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
- *  ----------------------------------------------------------------------------------  *
- *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
- *  ----------------------------------------------------------------------------------  *
- *  |        R15        |        RBX        |         RBP        |        RIP        |  *
- *  ----------------------------------------------------------------------------------  *
- *                                                                                      *
- ****************************************************************************************/
+/*************************************************************************************
+* ---------------------------------------------------------------------------------- *
+* |     0   |     1   |     2    |     3   |     4   |     5   |     6   |     7   | *
+* ---------------------------------------------------------------------------------- *
+* |    0x0  |    0x4  |    0x8   |    0xc  |   0x10  |   0x14  |   0x18  |   0x1c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |     8   |    9    |    10    |    11   |    12   |    13   |    14   |    15   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x20  |  0x24   |   0x28   |   0x2c  |   0x30  |   0x34  |   0x38  |   0x3c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    16   |    17   |    18   |    19    |    20   |    21   |    22   |    23   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xe40  |   0x44 |   0x48  |   0x4c   |   0x50  |   0x54  |   0x58  |   0x5c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    24   |   25    |    26    |   27    |    28   |    29   |    30   |    31   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x60  |   0x64  |   0x68   |   0x6c  |   0x70  |   0x74  |   0x78  |   0x7c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    32   |   32    |    33    |   34    |    35   |    36   |    37   |    38   | *
+* ---------------------------------------------------------------------------------- *
+* |   0x80  |   0x84  |   0x88   |   0x8c  |   0x90  |   0x94  |   0x98  |   0x9c  | *
+* ---------------------------------------------------------------------------------- *
+* |                          SEE registers (XMM6-XMM15)                            | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    39   |   40    |    41    |   42    |    43   |    44   |    45   |    46   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xa0  |   0xa4  |   0xa8   |   0xac  |   0xb0  |   0xb4  |   0xb8  |   0xbc  | *
+* ---------------------------------------------------------------------------------- *
+* | fc_mxcsr|fc_x87_cw|     <alignment>    |       fbr_strg    |      fc_dealloc   | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    47   |   48    |    49    |   50    |    51   |    52   |    53   |    54   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xc0  |   0xc4  |   0xc8   |   0xcc  |   0xd0  |   0xd4  |   0xd8  |   0xdc  | *
+* ---------------------------------------------------------------------------------- *
+* |        limit      |         base       |         R12       |         R13       | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    55   |   56    |    57    |   58    |    59   |    60   |    61   |    62   | *
+* ---------------------------------------------------------------------------------- *
+* |   0xe0  |   0xe4  |   0xe8   |   0xec  |   0xf0  |   0xf4  |   0xf8  |   0xfc  | *
+* ---------------------------------------------------------------------------------- *
+* |        R14        |         R15        |         RDI       |        RSI        | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    63   |   64    |    65    |   66    |    67   |    68   |    69   |    70   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x100  |  0x104  |  0x108   |  0x10c  |  0x110  |  0x114  |  0x118  |  0x11c  | *
+* ---------------------------------------------------------------------------------- *
+* |        RBX        |         RBP        |       hidden      |        RIP        | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    71   |   72    |    73    |   74    |    75   |    76   |    77   |    78   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x120  |  0x124  |  0x128   |  0x12c  |  0x130  |  0x134  |  0x138  |  0x13c  | *
+* ---------------------------------------------------------------------------------- *
+* |                                   parameter area                               | *
+* ---------------------------------------------------------------------------------- *
+* ---------------------------------------------------------------------------------- *
+* |    79   |   80    |    81    |   82    |    83   |    84   |    85   |    86   | *
+* ---------------------------------------------------------------------------------- *
+* |  0x140  |  0x144  |  0x148   |  0x14c  |  0x150  |  0x154  |  0x158  |  0x15c  | *
+* ---------------------------------------------------------------------------------- *
+* |       FCTX        |        DATA        |                                       | *
+* ---------------------------------------------------------------------------------- *
+**************************************************************************************/
 
+.file	"ontop_x86_64_ms_pe_gas.asm"
 .text
-.globl ontop_fcontext
-.type ontop_fcontext,@function
-.align 16
+.p2align 4,,15
+.globl	ontop_fcontext
+.def	ontop_fcontext;	.scl	2;	.type	32;	.endef
+.seh_proc	ontop_fcontext
 ontop_fcontext:
-    /* preserve ontop-function in R8 */
-    movq  %rdx, %r8
+.seh_endprologue
 
-    leaq  -0x38(%rsp), %rsp /* prepare stack */
+    leaq  -0x118(%rsp), %rsp /* prepare stack */
 
 #if !defined(BOOST_USE_TSX)
-    stmxcsr  (%rsp)     /* save MMX control- and status-word */
-    fnstcw   0x4(%rsp)  /* save x87 control-word */
+    /* save XMM storage */
+    movaps  %xmm6, 0x0(%rsp)
+    movaps  %xmm7, 0x10(%rsp)
+    movaps  %xmm8, 0x20(%rsp)
+    movaps  %xmm9, 0x30(%rsp)
+    movaps  %xmm10, 0x40(%rsp)
+    movaps  %xmm11, 0x50(%rsp)
+    movaps  %xmm12, 0x60(%rsp)
+    movaps  %xmm13, 0x70(%rsp)
+    movaps  %xmm14, 0x80(%rsp)
+    movaps  %xmm15, 0x90(%rsp)
+    stmxcsr  0xa0(%rsp)  /* save MMX control- and status-word */
+    fnstcw   0xa4(%rsp)  /* save x87 control-word */
 #endif
 
-    movq  %r12, 0x8(%rsp)  /* save R12 */
-    movq  %r13, 0x10(%rsp)  /* save R13 */
-    movq  %r14, 0x18(%rsp)  /* save R14 */
-    movq  %r15, 0x20(%rsp)  /* save R15 */
-    movq  %rbx, 0x28(%rsp)  /* save RBX */
-    movq  %rbp, 0x30(%rsp)  /* save RBP */
+    /* load NT_TIB */
+    movq  %gs:(0x30), %r10
+    /* save fiber local storage */
+    movq  0x20(%r10), %rax
+    movq  %rax, 0xb0(%rsp)
+    /* save current deallocation stack */
+    movq  0x1478(%r10), %rax
+    movq  %rax, 0xb8(%rsp)
+    /* save current stack limit */
+    movq  0x10(%r10), %rax
+    movq  %rax, 0xc0(%rsp)
+    /* save current stack base */
+    movq  0x08(%r10), %rax
+    movq  %rax, 0xc8(%rsp)
+
+    movq  %r12, 0xd0(%rsp)  /* save R12 */
+    movq  %r13, 0xd8(%rsp)  /* save R13 */
+    movq  %r14, 0xe0(%rsp)  /* save R14 */
+    movq  %r15, 0xe8(%rsp)  /* save R15 */
+    movq  %rdi, 0xf0(%rsp)  /* save RDI */
+    movq  %rsi, 0xf8(%rsp)  /* save RSI */
+    movq  %rbx, 0x100(%rsp)  /* save RBX */
+    movq  %rbp, 0x108(%rsp)  /* save RBP */
 
-    /* store RSP (pointing to context-data) in RAX */
-    movq  %rsp, %rax
+    movq  %rcx, 0x110(%rsp)  /* save hidden address of transport_t */
 
-    /* restore RSP (pointing to context-data) from RDI */
-    movq  %rdi, %rsp
+    /* preserve RSP (pointing to context-data) in RCX */
+    movq  %rsp, %rcx
+
+    /* restore RSP (pointing to context-data) from RDX */
+    movq  %rdx, %rsp
 
 #if !defined(BOOST_USE_TSX)
-    ldmxcsr  (%rsp)     /* restore MMX control- and status-word */
-    fldcw    0x4(%rsp)  /* restore x87 control-word */
+    /* restore XMM storage */
+    movaps  0x0(%rsp), %xmm6
+    movaps  0x10(%rsp), %xmm7
+    movaps  0x20(%rsp), %xmm8
+    movaps  0x30(%rsp), %xmm9
+    movaps  0x40(%rsp), %xmm10
+    movaps  0x50(%rsp), %xmm11
+    movaps  0x60(%rsp), %xmm12
+    movaps  0x70(%rsp), %xmm13
+    movaps  0x80(%rsp), %xmm14
+    movaps  0x90(%rsp), %xmm15
+ 	ldmxcsr 0xa0(%rsp) /* restore MMX control- and status-word */
+ 	fldcw   0xa4(%rsp) /* restore x87 control-word */
 #endif
 
-    movq  0x8(%rsp), %r12  /* restore R12 */
-    movq  0x10(%rsp), %r13  /* restore R13 */
-    movq  0x18(%rsp), %r14  /* restore R14 */
-    movq  0x20(%rsp), %r15  /* restore R15 */
-    movq  0x28(%rsp), %rbx  /* restore RBX */
-    movq  0x30(%rsp), %rbp  /* restore RBP */
-
-    leaq  0x38(%rsp), %rsp /* prepare stack */
-
-    /* return transfer_t from jump */
-    /* RAX == fctx, RDX == data */
-    movq  %rsi, %rdx
-    /* pass transfer_t as first arg in context function */
-    /* RDI == fctx, RSI == data */
-    movq  %rax, %rdi
+    /* load NT_TIB */
+    movq  %gs:(0x30), %r10
+    /* restore fiber local storage */
+    movq  0xb0(%rsp), %rax
+    movq  %rax, 0x20(%r10)
+    /* restore current deallocation stack */
+    movq  0xb8(%rsp), %rax
+    movq  %rax, 0x1478(%r10)
+    /* restore current stack limit */
+    movq  0xc0(%rsp), %rax
+    movq  %rax, 0x10(%r10)
+    /* restore current stack base */
+    movq  0xc8(%rsp), %rax
+    movq  %rax, 0x08(%r10)
+
+    movq  0xd0(%rsp),  %r12  /* restore R12 */
+    movq  0xd8(%rsp),  %r13  /* restore R13 */
+    movq  0xe0(%rsp),  %r14  /* restore R14 */
+    movq  0xe8(%rsp),  %r15  /* restore R15 */
+    movq  0xf0(%rsp),  %rdi  /* restore RDI */
+    movq  0xf8(%rsp),  %rsi  /* restore RSI */
+    movq  0x100(%rsp), %rbx  /* restore RBX */
+    movq  0x108(%rsp), %rbp  /* restore RBP */
+
+    movq  0x110(%rsp), %rax  /* restore hidden address of transport_t */
+
+    leaq  0x118(%rsp), %rsp /* prepare stack */
 
     /* keep return-address on stack */
 
+    /* transport_t returned in RAX */
+    /* return parent fcontext_t */
+    movq  %rcx, 0x0(%rax)
+    /* return data */
+    movq  %r8, 0x8(%rax)
+
+    /* transport_t as 1.arg of context-function */
+    /* RCX contains address of returned (hidden) transfer_t */
+    movq  %rax, %rcx
+    /* RDX contains address of passed transfer_t */
+    movq  %rax, %rdx
+
     /* indirect jump to context */
-    jmp  *%r8
-.size ontop_fcontext,.-ontop_fcontext
+    jmp  *%r9
+.seh_endproc
 
-/* Mark that we don't need executable stack.  */
-.section .note.GNU-stack,"",%progbits
+.section .drectve
+.ascii " -export:\"ontop_fcontext\""
